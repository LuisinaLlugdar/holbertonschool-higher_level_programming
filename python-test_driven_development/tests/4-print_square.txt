>>> print_square= __import__('4-print_square').print_square

SUCCESS CASES:
Valid int size (>= 0):
    >>> print_square(0)


    >>> print_square(2)
    ##
    ##

    >>> print_square(4)
    ####
    ####
    ####
    ####

    >>> print_square(True)
    #

FAILURE CASES:
Negative int size:
    >>> print_square(-6)
    Traceback (most recent call last):
    ...
    ValueError: size must be >= 0

Wrong data types:
    >>> print_square(3.6)
    Traceback (most recent call last):
    ...
    TypeError: size must be an integer

    >>> print_square("3")
    Traceback (most recent call last):
    ...
    TypeError: size must be an integer

    >>> print_square([2])
    Traceback (most recent call last):
    ...
    TypeError: size must be an integer

    >>> print_square("big")
    Traceback (most recent call last):
    ...
    TypeError: size must be an integer

    >>> print_square({7})
    Traceback (most recent call last):
    ...
    TypeError: size must be an integer

    >>> print_square(float("inf"))
    Traceback (most recent call last):
    ...
    TypeError: size must be an integer

Extra args:
    >>> print_square(5, 6)
    Traceback (most recent call last):
    ...
    TypeError: print_square() takes 1 positional argument but 2 were given

Without args:
    >>> print_square()
    Traceback (most recent call last):
    ...
    TypeError: print_square() missing 1 required positional argument: 'size'

With NaN as an arg:
    >>> print_square(float("NaN"))
    Traceback (most recent call last):
    ...
    TypeError: size must be an integer

With None as arg:
    >>> print_square(None)
    Traceback (most recent call last):
    ...
    TypeError: size must be an integer
